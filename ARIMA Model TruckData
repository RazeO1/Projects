{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9294508,"sourceType":"datasetVersion","datasetId":5627178}],"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **1. Introduction to ARIMA:**\n\n* **ARIMA** stands for **Autoregressive Integrated Moving Average Model**. It belongs to a class of models that explains a given time series based on its own past values -i.e.- its own lags and the lagged forecast errors. The equation can be used to forecast future values. Any ‘non-seasonal’ time series that exhibits patterns and is not a random white noise can be modeled with ARIMA models.\n\n* So, ARIMA, short for AutoRegressive Integrated Moving Average, is a forecasting algorithm based on the idea that the information in the past values of the time series can alone be used to predict the future values.\n\n* **ARIMA Models** are specified by three order parameters: (p, d, q), where,\n\n * p is the order of the AR term\n\n * q is the order of the MA term\n\n * d is the number of differencing required to make the time series stationary\n\n* **AR(p) Autoregression** – a regression model that utilizes the dependent relationship between a current observation and observations over a previous period. An auto regressive (AR(p)) component refers to the use of past values in the regression equation for the time series.\n\n* **I(d) Integration** – uses differencing of observations (subtracting an observation from observation at the previous time step) in order to make the time series stationary. Differencing involves the subtraction of the current values of a series with its previous values d number of times.\n\n* **MA(q) Moving Average** – a model that uses the dependency between an observation and a residual error from a moving average model applied to lagged observations. A moving average component depicts the error of the model as a combination of previous error terms. The order q represents the number of terms to be included in the model.","metadata":{}},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-03T09:34:28.949869Z","iopub.execute_input":"2024-09-03T09:34:28.950933Z","iopub.status.idle":"2024-09-03T09:34:28.960955Z","shell.execute_reply.started":"2024-09-03T09:34:28.950867Z","shell.execute_reply":"2024-09-03T09:34:28.959465Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"path = '/kaggle/input/dataset/TruckDemand.csv'\n\ndf = pd.read_csv(path)\n\ndf.head()\n\ndf.info()\n\ndf.plot()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:28.963428Z","iopub.execute_input":"2024-09-03T09:34:28.963950Z","iopub.status.idle":"2024-09-03T09:34:29.311363Z","shell.execute_reply.started":"2024-09-03T09:34:28.963894Z","shell.execute_reply":"2024-09-03T09:34:29.310124Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from statsmodels.tsa.stattools import adfuller\nfrom numpy import log\nresult = adfuller(df.TrucksMonth.dropna())\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:29.312885Z","iopub.execute_input":"2024-09-03T09:34:29.313292Z","iopub.status.idle":"2024-09-03T09:34:30.159705Z","shell.execute_reply.started":"2024-09-03T09:34:29.313253Z","shell.execute_reply":"2024-09-03T09:34:30.158397Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from statsmodels.tsa.stattools import adfuller\nfrom numpy import log\nresult = adfuller(df.TrucksQuarter.dropna())\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:30.161473Z","iopub.execute_input":"2024-09-03T09:34:30.162239Z","iopub.status.idle":"2024-09-03T09:34:30.181105Z","shell.execute_reply.started":"2024-09-03T09:34:30.162180Z","shell.execute_reply":"2024-09-03T09:34:30.179598Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from statsmodels.tsa.stattools import adfuller\nfrom numpy import log\nresult = adfuller(df.TrucksYear.dropna())\nprint('ADF Statistic: %f' % result[0])\nprint('p-value: %f' % result[1])","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:30.184133Z","iopub.execute_input":"2024-09-03T09:34:30.184572Z","iopub.status.idle":"2024-09-03T09:34:30.201690Z","shell.execute_reply.started":"2024-09-03T09:34:30.184531Z","shell.execute_reply":"2024-09-03T09:34:30.200001Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nimport matplotlib.pyplot as plt\nplt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n# TrucksMonth\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(df.TrucksMonth); axes[0, 0].set_title('Original Series')\nplot_acf(df.TrucksMonth, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(df.TrucksMonth.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(df.TrucksMonth.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(df.TrucksMonth.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(df.TrucksMonth.diff().diff().dropna(), ax=axes[2, 1])\n\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:30.203522Z","iopub.execute_input":"2024-09-03T09:34:30.204017Z","iopub.status.idle":"2024-09-03T09:34:31.476553Z","shell.execute_reply.started":"2024-09-03T09:34:30.203967Z","shell.execute_reply":"2024-09-03T09:34:31.475153Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n# TruckQuarter\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(df.TrucksQuarter); axes[0, 0].set_title('Original Series')\nplot_acf(df.TrucksQuarter, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(df.TrucksQuarter.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(df.TrucksQuarter.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(df.TrucksQuarter.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(df.TrucksQuarter.diff().diff().dropna(), ax=axes[2, 1])\n\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:31.478231Z","iopub.execute_input":"2024-09-03T09:34:31.478690Z","iopub.status.idle":"2024-09-03T09:34:32.777102Z","shell.execute_reply.started":"2024-09-03T09:34:31.478641Z","shell.execute_reply":"2024-09-03T09:34:32.775824Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.rcParams.update({'figure.figsize':(9,7), 'figure.dpi':120})\n\n# TruckYear\n# Original Series\nfig, axes = plt.subplots(3, 2, sharex=True)\naxes[0, 0].plot(df.TrucksYear); axes[0, 0].set_title('Original Series')\nplot_acf(df.TrucksYear, ax=axes[0, 1])\n\n# 1st Differencing\naxes[1, 0].plot(df.TrucksYear.diff()); axes[1, 0].set_title('1st Order Differencing')\nplot_acf(df.TrucksYear.diff().dropna(), ax=axes[1, 1])\n\n# 2nd Differencing\naxes[2, 0].plot(df.TrucksYear.diff().diff()); axes[2, 0].set_title('2nd Order Differencing')\nplot_acf(df.TrucksYear.diff().diff().dropna(), ax=axes[2, 1])\n\n\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:32.778538Z","iopub.execute_input":"2024-09-03T09:34:32.778923Z","iopub.status.idle":"2024-09-03T09:34:33.984327Z","shell.execute_reply.started":"2024-09-03T09:34:32.778884Z","shell.execute_reply":"2024-09-03T09:34:33.982899Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# ****2. Finding P****\n\n* **p1** -> for TruckMonth\n* **p2** -> for TruckQuarter\n* **p3** -> for TruckYear","metadata":{}},{"cell_type":"code","source":"# PACF plot of 1st differenced series\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\n# TrucksMonth\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(df.TrucksMonth.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,5))\nplot_pacf(df.TrucksMonth.diff().dropna(), ax=axes[1])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:33.986000Z","iopub.execute_input":"2024-09-03T09:34:33.986480Z","iopub.status.idle":"2024-09-03T09:34:34.588646Z","shell.execute_reply.started":"2024-09-03T09:34:33.986430Z","shell.execute_reply":"2024-09-03T09:34:34.587032Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- We can see that the PACF lag 1 is quite significant since it is well above the significance line. So, we will fix the value of p1 as 1.","metadata":{}},{"cell_type":"code","source":"# PACF plot of 1st differenced series\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\n#TrucksQuarter\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(df.TrucksQuarter.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,5))\nplot_pacf(df.TrucksQuarter.diff().dropna(), ax=axes[1])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:34.590334Z","iopub.execute_input":"2024-09-03T09:34:34.590678Z","iopub.status.idle":"2024-09-03T09:34:35.062052Z","shell.execute_reply.started":"2024-09-03T09:34:34.590642Z","shell.execute_reply":"2024-09-03T09:34:35.060829Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- We can see that the PACF lag 1 is quite significant since it is well above the significance line. So, we will fix the value of p2 as 2.","metadata":{}},{"cell_type":"code","source":"# PACF plot of 1st differenced series\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\n#TrucksYear\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(df.TrucksYear.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,5))\nplot_pacf(df.TrucksYear.diff().dropna(), ax=axes[1])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:35.064003Z","iopub.execute_input":"2024-09-03T09:34:35.064432Z","iopub.status.idle":"2024-09-03T09:34:35.548228Z","shell.execute_reply.started":"2024-09-03T09:34:35.064391Z","shell.execute_reply":"2024-09-03T09:34:35.547011Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- We can see that the PACF lag 1 is quite significant since it is well above the significance line. So, we will fix the value of p3 as 2.","metadata":{}},{"cell_type":"markdown","source":"# **3. Finding q**\n\n* q1 -> TrucksMonth\n* q2 -> TrucksQuarter\n* q3 -> TrucksYear","metadata":{}},{"cell_type":"code","source":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\n#TrucksMonth\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(df.TrucksMonth.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,1.2))\nplot_acf(df.TrucksMonth.diff().dropna(), ax=axes[1])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:35.550036Z","iopub.execute_input":"2024-09-03T09:34:35.550571Z","iopub.status.idle":"2024-09-03T09:34:36.001970Z","shell.execute_reply.started":"2024-09-03T09:34:35.550518Z","shell.execute_reply":"2024-09-03T09:34:36.000800Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- We can see that couple of lags are well above the significance line. So, we will fix q1 as 2. If there is any doubt, we will go with the simpler model that sufficiently explains the Y.","metadata":{}},{"cell_type":"code","source":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\n#TrucksQuarter\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(df.TrucksQuarter.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,1.2))\nplot_acf(df.TrucksQuarter.diff().dropna(), ax=axes[1])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:36.003486Z","iopub.execute_input":"2024-09-03T09:34:36.004036Z","iopub.status.idle":"2024-09-03T09:34:36.417975Z","shell.execute_reply.started":"2024-09-03T09:34:36.003916Z","shell.execute_reply":"2024-09-03T09:34:36.416777Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- We can see that couple of lags are well above the significance line. So, we will fix q2 as 3. If there is any doubt, we will go with the simpler model that sufficiently explains the Y.","metadata":{}},{"cell_type":"code","source":"from statsmodels.graphics.tsaplots import plot_acf, plot_pacf\nplt.rcParams.update({'figure.figsize':(9,3), 'figure.dpi':120})\n\n#TrucksYear\nfig, axes = plt.subplots(1, 2, sharex=True)\naxes[0].plot(df.TrucksYear.diff()); axes[0].set_title('1st Differencing')\naxes[1].set(ylim=(0,1.2))\nplot_acf(df.TrucksYear.diff().dropna(), ax=axes[1])\n\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:36.424189Z","iopub.execute_input":"2024-09-03T09:34:36.425591Z","iopub.status.idle":"2024-09-03T09:34:36.882105Z","shell.execute_reply.started":"2024-09-03T09:34:36.425531Z","shell.execute_reply":"2024-09-03T09:34:36.880896Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"- We can see that couple of lags are well above the significance line. So, we will fix q3 as 3. If there is any doubt, we will go with the simpler model that sufficiently explains the Y.","metadata":{}},{"cell_type":"markdown","source":"# **4. Selecting ARIMA Model**","metadata":{}},{"cell_type":"code","source":"!pip install pmdarima","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:34:36.883773Z","iopub.execute_input":"2024-09-03T09:34:36.884268Z","iopub.status.idle":"2024-09-03T09:34:53.301227Z","shell.execute_reply.started":"2024-09-03T09:34:36.884200Z","shell.execute_reply":"2024-09-03T09:34:53.299539Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from pmdarima import auto_arima \n  \n# Ignore harmless warnings \nimport warnings \nwarnings.filterwarnings(\"ignore\")\n\n# For TrucksMonth \nstepwise_fit1 = auto_arima(df.TrucksMonth, start_p = 1, start_q = 1, \n                          max_p = 4, max_q = 5, m = 12, \n                          start_P = 1, seasonal = True, \n                          d = 2, D = 2, trace = True, \n                          error_action ='ignore',   # we don't want to know if an order does not work \n                          suppress_warnings = True,  # we don't want convergence warnings \n                          stepwise = True)           # set to stepwise \n  \n\nstepwise_fit1.summary() ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T11:13:26.738398Z","iopub.execute_input":"2024-09-03T11:13:26.738868Z","iopub.status.idle":"2024-09-03T11:14:12.202175Z","shell.execute_reply.started":"2024-09-03T11:13:26.738825Z","shell.execute_reply":"2024-09-03T11:14:12.201068Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# For TrucksQuarter \nstepwise_fit2 = auto_arima(df.TrucksQuarter, start_p = 1, start_q = 1, \n                          max_p = 4, max_q = 5, m = 12, \n                          start_P = 0, seasonal = True, \n                          d = None, D = 2, trace = True, \n                          error_action ='ignore',   # we don't want to know if an order does not work \n                          suppress_warnings = True,  # we don't want convergence warnings \n                          stepwise = True)           # set to stepwise \n  \n\nstepwise_fit2.summary() ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T10:45:19.509216Z","iopub.execute_input":"2024-09-03T10:45:19.509735Z","iopub.status.idle":"2024-09-03T10:46:56.037900Z","shell.execute_reply.started":"2024-09-03T10:45:19.509676Z","shell.execute_reply":"2024-09-03T10:46:56.036795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# For TrucksYear \nstepwise_fit3 = auto_arima(df.TrucksYear, start_p = 1, start_q = 1, \n                          max_p = 5, max_q = 5, m = 12, \n                          start_P = 1, seasonal = True, \n                          d = None, D = 1, trace = True, \n                          error_action ='ignore',   # we don't want to know if an order does not work \n                          suppress_warnings = True,  # we don't want convergence warnings \n                          stepwise = True)           # set to stepwise \n  \n\nstepwise_fit3.summary() ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:11:16.601164Z","iopub.execute_input":"2024-09-03T13:11:16.601616Z","iopub.status.idle":"2024-09-03T13:11:45.912039Z","shell.execute_reply.started":"2024-09-03T13:11:16.601573Z","shell.execute_reply":"2024-09-03T13:11:45.910963Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"print(df)","metadata":{"execution":{"iopub.status.busy":"2024-09-03T09:38:09.184124Z","iopub.execute_input":"2024-09-03T09:38:09.187890Z","iopub.status.idle":"2024-09-03T09:38:09.209784Z","shell.execute_reply.started":"2024-09-03T09:38:09.187822Z","shell.execute_reply":"2024-09-03T09:38:09.208793Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **5. Train the ARIMA Model**","metadata":{}},{"cell_type":"code","source":"# Split data into train / test sets \nsplit_index = int(0.8 * len(df))\n\ntrain = df.iloc[:split_index] \ntest = df.iloc[split_index:] \n\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:01:41.128361Z","iopub.execute_input":"2024-09-03T13:01:41.128931Z","iopub.status.idle":"2024-09-03T13:01:41.136505Z","shell.execute_reply.started":"2024-09-03T13:01:41.128864Z","shell.execute_reply":"2024-09-03T13:01:41.134615Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model1 = SARIMAX(train['TrucksMonth'], \n\t\t\t\torder = (2, 1, 1),\n                seasonal_order =(2, 2, 3, 12))\n\nresult1 = model1.fit(disp=0) \nresult1.summary() ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:01:44.305087Z","iopub.execute_input":"2024-09-03T13:01:44.305521Z","iopub.status.idle":"2024-09-03T13:01:55.405344Z","shell.execute_reply.started":"2024-09-03T13:01:44.305481Z","shell.execute_reply":"2024-09-03T13:01:55.404176Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"start = len(train) \nend = len(train) + len(test) - 1\n  \n# Predictions for one-year against the test set \npredictions1 = result1.predict(start, end, \n                             typ = 'levels').rename(\"Predictions\") \n  \n# plot predictions and actual values \npredictions1.plot(legend = True) \ntest['TrucksMonth'].plot(legend = True) ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:01:59.230575Z","iopub.execute_input":"2024-09-03T13:01:59.231049Z","iopub.status.idle":"2024-09-03T13:01:59.556846Z","shell.execute_reply.started":"2024-09-03T13:01:59.230997Z","shell.execute_reply":"2024-09-03T13:01:59.555237Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model2 = SARIMAX(train['TrucksQuarter'], \n\t\t\t\torder = (1, 0, 2),\n                seasonal_order =(1, 2, 2, 12)) \n\nresult2 = model2.fit(disp=0) \nresult2.summary() ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:02:02.442739Z","iopub.execute_input":"2024-09-03T13:02:02.444034Z","iopub.status.idle":"2024-09-03T13:02:08.133388Z","shell.execute_reply.started":"2024-09-03T13:02:02.443982Z","shell.execute_reply":"2024-09-03T13:02:08.132209Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"start = len(train) \nend = len(train) + len(test) - 1\n  \n# Predictions for one-year against the test set \npredictions2 = result2.predict(start, end, \n                             typ = 'levels').rename(\"Predictions\") \n  \n# plot predictions and actual values \npredictions2.plot(legend = True) \ntest['TrucksQuarter'].plot(legend = True) ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:02:10.532737Z","iopub.execute_input":"2024-09-03T13:02:10.533162Z","iopub.status.idle":"2024-09-03T13:02:10.862547Z","shell.execute_reply.started":"2024-09-03T13:02:10.533122Z","shell.execute_reply":"2024-09-03T13:02:10.861279Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"model3 = SARIMAX(train['TrucksYear'], \n\t\t\t\torder = (3, 1, 0), \n                seasonal_order =(0, 1, 2, 12))\n\nresult3 = model3.fit(disp=0) \nresult1.summary() ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:13:05.932663Z","iopub.execute_input":"2024-09-03T13:13:05.933209Z","iopub.status.idle":"2024-09-03T13:13:06.958850Z","shell.execute_reply.started":"2024-09-03T13:13:05.933166Z","shell.execute_reply":"2024-09-03T13:13:06.957795Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"start = len(train) \nend = len(train) + len(test) - 1\n  \n# Predictions for one-year against the test set \npredictions3 = result3.predict(start, end, \n                             typ = 'levels').rename(\"Predictions\") \n  \n# plot predictions and actual values \npredictions3.plot(legend = True) \ntest['TrucksYear'].plot(legend = True) ","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **6. Evaluate the model:**","metadata":{}},{"cell_type":"code","source":"# Symmetric Mean Absolute Percentage Error Function\ndef smape(y_true, y_pred):\n    \n    return 100/len(y_true) * np.sum(2 * np.abs(y_pred - y_true) / (np.abs(y_true) + np.abs(y_pred)))\n","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:02:27.930435Z","iopub.execute_input":"2024-09-03T13:02:27.930943Z","iopub.status.idle":"2024-09-03T13:02:27.938050Z","shell.execute_reply.started":"2024-09-03T13:02:27.930896Z","shell.execute_reply":"2024-09-03T13:02:27.936509Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error \nfrom statsmodels.tools.eval_measures import rmse \n \n","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:02:29.480379Z","iopub.execute_input":"2024-09-03T13:02:29.480832Z","iopub.status.idle":"2024-09-03T13:02:29.487238Z","shell.execute_reply.started":"2024-09-03T13:02:29.480793Z","shell.execute_reply":"2024-09-03T13:02:29.485865Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# For TrucksMonth\n# Calculate root mean squared error (RMSE)\nrm = rmse(test[\"TrucksMonth\"], predictions1) \n  \n# Calculate mean squared error (MSE)\nmse = mean_squared_error(test[\"TrucksMonth\"], predictions1) \n\n# Calculate  Symmetric Mean Absolute Percentage Error (sMAPE)\nsm = smape(test[\"TrucksMonth\"], predictions1)\nprint({'RMSE':rm, 'MSE':mse, 'SMAPE':sm})","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:02:31.071616Z","iopub.execute_input":"2024-09-03T13:02:31.072049Z","iopub.status.idle":"2024-09-03T13:02:31.082969Z","shell.execute_reply.started":"2024-09-03T13:02:31.072009Z","shell.execute_reply":"2024-09-03T13:02:31.081457Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# For TrucksQuarter\n# Calculate root mean squared error (RMSE)\nrm = rmse(test[\"TrucksQuarter\"], predictions2) \n  \n# Calculate mean squared error (MSE)\nmse = mean_squared_error(test[\"TrucksQuarter\"], predictions2) \n\n# Calculate  Symmetric Mean Absolute Percentage Error (sMAPE)\nsm = smape(test[\"TrucksQuarter\"], predictions2)\nprint({'RMSE':rm, 'MSE':mse, 'SMAPE':sm})","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:02:32.775255Z","iopub.execute_input":"2024-09-03T13:02:32.775683Z","iopub.status.idle":"2024-09-03T13:02:32.785591Z","shell.execute_reply.started":"2024-09-03T13:02:32.775645Z","shell.execute_reply":"2024-09-03T13:02:32.783937Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# For TrucksYear\n# Calculate root mean squared error (RMSE)\nrm = rmse(test[\"TrucksYear\"], predictions3) \n  \n# Calculate mean squared error (MSE)\nmse = mean_squared_error(test[\"TrucksYear\"], predictions3) \n\n# Calculate  Symmetric Mean Absolute Percentage Error (sMAPE)\nsm = smape(test[\"TrucksYear\"], predictions3)\nprint({'RMSE':rm, 'MSE':mse, 'SMAPE':sm})","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:13:28.509827Z","iopub.execute_input":"2024-09-03T13:13:28.510292Z","iopub.status.idle":"2024-09-03T13:13:28.522143Z","shell.execute_reply.started":"2024-09-03T13:13:28.510249Z","shell.execute_reply":"2024-09-03T13:13:28.520649Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"# **7. Forecasting using ARIMA Model**","metadata":{}},{"cell_type":"code","source":"# TrucksMonth\nmodel1 = model1 = SARIMAX(df.TrucksMonth,  \n                        order = (2, 1, 1),  \n                        seasonal_order =(2, 2, 3, 12)) \nresult1 = model1.fit(disp=0) \n  \n# Forecast for the next Months \nforecast1 = result1.predict(start = len(train),  \n                          end = (len(train) + len(test)) - 1,  \n                          typ = 'levels').rename('Forecast') \n  \n# Plot the forecast values \ntrain.TrucksMonth.plot(figsize = (12, 5), legend = True) \ntest.TrucksMonth.plot(figsize = (12, 5), legend = True) \nforecast1.plot(figsize = (12, 5), legend = True) ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T12:57:03.117260Z","iopub.execute_input":"2024-09-03T12:57:03.117722Z","iopub.status.idle":"2024-09-03T12:57:16.484566Z","shell.execute_reply.started":"2024-09-03T12:57:03.117665Z","shell.execute_reply":"2024-09-03T12:57:16.483159Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# TrucksQuarter\nmodel2 = model2 = SARIMAX(df.TrucksQuarter,  \n                        order = (1, 0, 2),  \n                        seasonal_order =(1, 2, 2, 12)) \nresult2 = model2.fit(disp=0) \n  \n# Forecast for the next Quarters \nforecast2 = result2.predict(start = len(train),  \n                          end = (len(train) + len(test)) - 1,  \n                          typ = 'levels').rename('Forecast') \n  \n# # Plot the forecast values \ntrain.TrucksQuarter.plot(figsize = (12, 5), legend = True) \ntest.TrucksQuarter.plot(figsize = (12, 5), legend = True) \nforecast2.plot(figsize = (12, 5), legend = True) ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:00:06.520977Z","iopub.execute_input":"2024-09-03T13:00:06.521530Z","iopub.status.idle":"2024-09-03T13:00:17.240881Z","shell.execute_reply.started":"2024-09-03T13:00:06.521485Z","shell.execute_reply":"2024-09-03T13:00:17.239361Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"# TrucksYear\nmodel3 = model3 = SARIMAX(df.TrucksYear,  \n                        order = (3, 1, 1),  \n                        seasonal_order =(2, 1, 3, 12)) \nresult3 = model3.fit(disp=0) \n  \n# Forecast for the next Year \nforecast3 = result3.predict(start = len(train),  \n                          end = (len(train) + len(test)) - 1,  \n                          typ = 'levels').rename('Forecast') \n  \n# Plot the forecast values \ntrain.TrucksYear.plot(figsize = (12, 5), legend = True) \ntest.TrucksYear.plot(figsize = (12, 5), legend = True) \nforecast3.plot(figsize = (12, 5), legend = True) ","metadata":{"execution":{"iopub.status.busy":"2024-09-03T13:13:33.722159Z","iopub.execute_input":"2024-09-03T13:13:33.722613Z","iopub.status.idle":"2024-09-03T13:13:44.910252Z","shell.execute_reply.started":"2024-09-03T13:13:33.722571Z","shell.execute_reply":"2024-09-03T13:13:44.908956Z"},"trusted":true},"execution_count":null,"outputs":[]}]}